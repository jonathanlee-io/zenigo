generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("FEATURE_FLAG_DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  supabaseUserId      String               @unique
  displayName         String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now())
  productPostUpvotes  ProductPostUpvote[]
  productPostComments ProductPostComment[]
  clientCreated       Client[]             @relation(name: "createdByUser")
  project             Project[]
  clientsWhereMember  Client[]             @relation(name: "membersOfClient")
  clientsWhereAdmin   Client[]             @relation(name: "adminsOfClient")
  clientId            String?
}

model Client {
  id            String      @id @default(uuid())
  displayName   String
  paymentPlan   PaymentPlan @relation(fields: [paymentPlanId], references: [id], onUpdate: Cascade)
  createdBy     User        @relation(fields: [userId], references: [id], name: "createdByUser")
  members       User[]      @relation(name: "membersOfClient")
  admins        User[]      @relation(name: "adminsOfClient")
  projects      Project[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  userId        String
  paymentPlanId String
}

model PaymentPlan {
  id                                 String   @id @default(uuid())
  name                               String
  description                        String
  monthlyPrice                       String
  maxProjectCount                    Int      @default(0)
  maxTeamMemberCount                 Int      @default(0)
  isCustomSubdomainIncluded          Boolean  @default(true)
  isEmbeddableFeedbackWidgetIncluded Boolean  @default(true)
  isCustomHostnameIncluded           Boolean  @default(false)
  tag                                String?
  sortIndex                          Int      @default(0)
  stripePricingTableId               String
  stripePublishableKey               String
  createdAt                          DateTime @default(now())
  updatedAt                          DateTime @default(now())
  clients                            Client[]
}

model Project {
  id                       String      @id @default(uuid())
  name                     String
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @default(now())
  createdBy                User        @relation(fields: [userId], references: [id])
  isBugReportsEnabled      Boolean     @default(true)
  isFeatureRequestsEnabled Boolean     @default(true)
  isFeatureFeedbackEnabled Boolean     @default(true)
  isOwnerUpdatesEnabled    Boolean     @default(true)
  isOwnerIssuesEnabled     Boolean     @default(false)
  isUserIssuesEnabled      Boolean     @default(false)
  hostnames                Hostname[]
  subdomains               Subdomain[]
  client                   Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId                 String?
  userId                   String
  product                  Product?
  productId                String?
}

model Subdomain {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  subdomain String   @unique
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
}

model Hostname {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  hostname  String   @unique
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
}

model Product {
  id                        String                      @id @default(uuid())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now())
  project                   Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId                 String                      @unique
  ProductFeedbackSubmission ProductFeedbackSubmission[]
  ProductPost               ProductPost?
}

enum ProductPostType {
  OWNER_UPDATE
  OWNER_ISSUE
  USER_ISSUE
}

model ProductPost {
  id          String               @id @default(uuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now())
  type        ProductPostType
  title       String
  description String
  upvotes     ProductPostUpvote[]
  comments    ProductPostComment[]
  product     Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String               @unique
}

model ProductPostUpvote {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  ProductPost   ProductPost? @relation(fields: [productPostId], references: [id], onDelete: Cascade)
  productPostId String?
  User          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
}

model ProductPostComment {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  text          String
  ProductPost   ProductPost? @relation(fields: [productPostId], references: [id], onDelete: Cascade)
  productPostId String?
  User          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
}

enum ProductFeedbackSubmissionType {
  BUG_REPORT
  FEATURE_REQUEST
  FEATURE_FEEDBACK
}

model ProductFeedbackSubmission {
  id                     String                        @id @default(uuid())
  createdAt              DateTime                      @default(now())
  updatedAt              DateTime                      @default(now())
  product                Product                       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId              String
  clientIp               String
  clientSubdomain        String
  widgetMetadataType     ProductFeedbackSubmissionType
  widgetMetadataUrl      String
  widgetMetadataTimezone String
  submittedAt            DateTime
  userFeedback           String
}
